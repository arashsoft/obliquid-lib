= org.obliquid.helpers = 

org.obliquid.helpers are Java helper classes released with LGPL3 licence.
They are my personal code library that I've used in multiple projects.
Maven is used to pull dependencies and build the project. All classes are not
meant to be comprehensive, but they contain what I need,
[http://en.wikipedia.org/wiki/You_ain%27t_gonna_need_it YAGNI] style.

The following classes are committed to date:

=== org.obliquid.helpers package ===

;ArrayHelper
: Helper Class for Arrays and Collections: buil HashMap from two arrys, build an ArrayList from one or two Arrays
;BdHelper
: Make it easier to do some operations with BigDecimals
;ByteArrayHelper
: Analyze and manipulate byte arrays: search, replace, toArray (from List)
;CurrencyHelper
: Format currency according to the current Locale
;DateHelper
: Helper Class for Dates, both Java Dates and Joda Dates.
;ExecHelper
: Run system commands, provides an exec function that returns an exit value
;FileHelper
: File management class: mkdir, rm, rmdir, touch, readFileToByteArray, writeByteArrayToFile
;HtaccessHelper
: Analyze Apache .htaccess files: listAuthorizedAddresses(), buildAllowFrom()
;RecursiveDump
: Recursive Dump of Collections & Arrays
;SqlFileReader
: Provides a statement Iterator interface to SQL files
;SqlHelper
: SQL related utils: build a prepared statement, methods to close a ResultSet or Statement checking for null and Exceptions, methods to extract values from a ResultSet including blobs.
;StopWatch 
: Simple Stop Watch with seconds and milliseconds timings and sleep functions wrapped to ignore exceptions.
;StringHelper
: Utility functions for String: SHA1, MD5, random string, ellipsis, escape, implode, quote, repeat, substr, truncate, ucFirst, zeroPad
;WebClient
: Return info about the Web Client: getIpAddress()

----

=== org.obliquid.config package ===

;AppConfig
: Application configuration, allows to keep different configuration for different servers in the same codebase, so I can publish over and over without worrying about messing the configurations.

----

=== org.obliquid.db package ===

;DbNull
: Represents a NULL value in a database field, and holds the type from java.sql.Types
;MetaDb
: Manage interactions with DB
;HasDb
: Base class for Objects needing a DB connection

----

=== org.obliquid.datatype package ===

;DataType
: Abstract base class for scalar data types. set()/get() the data safely and check if isValid()
;BooleanType
: Represents a boolean value, raw as Y/N
;CountryCode
: Hold and validate a two letter ISO Country code
;EmailAddrees
: Hold and validate an email address
;EmailList
: Hold and validate a comma separated list of email addresses (spaces allowed)
;IpAddress
: Hold and validate an IP address
;IsoDate
: Hold and validate a date in ISO format yyyy-MM-dd
;ItalianPostCode
: Hold and validate an Italian postcode (5 digits)
;LanguageType
: Hold and validate ISO language codes, only IT/EN for now
;Password
: Hold and validate a password, according to my rules
;PathName
: Hold and validate a relative path, according to my rules
;PhoneNumber
: Hold, validate and normalize a phone number
;UrlType
: Hold and validate a URL
;Username
: Hold and validate a Username
;VatPercent
: Hold and validate a VAT Percentage

----

=== org.obliquid.datatype.companytaxid ===

;CompanyTaxId
: Base class for Company Tax Ids
;ItalianCompanyTaxId
: Hold and validate an Italian Company Tax Id (PI). Allowed values are a valid VatId or a PersonalTaxId.
;SpanishCompanyTaxId
: Hold and validate a Spanish Company Tax Id (NIF). Allowed values is a valid VatId.

----

=== org.obliquid.datatype.personaltaxid ===

;PersonalTaxId
: Base class for PersonalTaxIds
;ItalianPersonalTaxId
: Hold and validate an Italian Personal Tax Id (codice fiscale), also verifies the check digit
;FrenchPersonalTaxId
: Just a stub always returning true

----

=== org.obliquid.datatype.vatid ===

;VatId
: Hold and validate a EU VAT Id
;ItalianVatId
: Hold and verify an Italian VAT Id, also verifies the check digit
;FrenchVatId
: Just a stub always returning true
;GermanVatId
: Just a stub always returning true
;SpanishVatId
: Hold and verify a Spanish VAT Id. It doesn't verify the check digit, just the general format

----

=== org.obliquid.client package ===

;ClientFactory
: A factory class to create Clients, using the application configuration (PostMan, MyMemCache, AmazonEC2, AmazonS3, AmazonSimpleEmailService
;MyMemCache
: Creates a connection pool of MemCached clients
;PostMan
: Interface to send an email. Use ClientFactory to create an instance
;Wget
: Class to download a URL from HTTP

----

=== org.obliquid.scripts package ===

;InstallCert
: Utility program to install HTTPS certificates in the VM

----

=== org.obliquid.sdb package ===

;AmazonSdbHelper
: Implementation of PersistenceInterface for Amazon SimpleDb with the official SDK
;SimpleDbHelper
: Implementation of PersistenceInterface for Amazon SimpleDb with Typica
;PersistenceInterface
: Interface for persistence in value-data storage
;EntityInterface
: Common Interface for Persistence Entities

----

=== org.obliquid.ec2 package ===

;Ec2Tag
: Helps to deal with EC2 Tags, especially with Name tag
;MyVolume
: Wrapper around InstanceBlockDeviceMapping, provides getDeviceName, getId, getName, getSizeInGb, toString
;MySnapshot
: Wrapper around Amazon Snapshot
;FirewallManager
: Authorize/Revoke authorization to IP addresses or CIDR to connect to our Amazon servers
;SnapshotManager
: List instances, volumes, create / delete snapshots and set the Name tag of a snapshot

== Maven Quick Start ==

This project uses Maven, if you know it already you can stop reading now. Otherwise read the [http://maven.apache.org/guides/getting-started/index.html Maven Getting Started Guide].  Supposing that Maven is already installed on your system, here are some useful commands:

'''mvn compile''' downloads dependencies and compiles the project, classes are generated in
target/classes directory.

'''mvn test''' runs the test suite, thus running all tests

'''mvn clean''' deletes the target/ directory with all generated artifacts

'''mvn package''' generates a jar file in the target/ directory

'''mvn javadoc:javadoc''' generates the Javadoc files in target/site/apidocs/

'''mvn eclipse:eclipse''' generates or updates eclipse project files, run this command every time a new dependency is added to pom.xml - I've blogged in more details about [http://www.stefanolocati.it/blog/?p=917 external dependencies]

'''mvn eclipse:eclipse -DdownloadSources=true  -DdownloadJavadocs=true''' to download also Javadocs and Sources

